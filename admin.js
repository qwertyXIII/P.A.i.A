console.clear();

const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const os = require('os');

const WORK_DIR = __dirname;
const CONFIG_PATH = path.join(WORK_DIR, 'config.json');
const LOGS_DIR = path.join(WORK_DIR, 'logs');

// –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
const ALLOWED_FILES = new Set([
  'config.json',
  'data.json',
  'settings.json',
  'users.json'
]);

let config = loadConfig();
const bot = new Telegraf(config.BOT_TOKEN);
const pendingConfirmations = {}; // –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π /clean
const resmonIntervals = {}; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const resmonState = {}; // —Ö—Ä–∞–Ω–∏—Ç lastText –∏ messageId –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞

function loadConfig() {
  try {
    const raw = fs.readFileSync(CONFIG_PATH, 'utf-8');
    return JSON.parse(raw);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json:', e);
    process.exit(1);
  }
}

function saveConfig() {
  fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
  config = loadConfig();
}

function isAuthorized(userId) {
  if (!config || !Array.isArray(config.ADMINS)) return false;
  return config.ADMINS.includes(userId);
}

async function notifyAdmins(message, extra = {}) {
  for (const adminId of config.ADMINS) {
    try {
      await bot.telegram.sendMessage(adminId, message, extra);
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${adminId}:`, err?.message || err);
    }
  }
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –í–°–ï–• –∞–ø–¥–µ–π—Ç–æ–≤
async function checkAuth(ctx) {
  if (!ctx.from) return true;
  if (isAuthorized(ctx.from.id)) return true;

  const user = ctx.from || {};
  const fullName = `${user.first_name || ''} ${user.last_name || ''}`.trim() || '-';

  try {
    await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞ –¥–æ—Å—Ç—É–ø–æ–º. @DXIII_tg');
  } catch (e) {
    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  }

  try {
    await notifyAdmins(
      `üö® –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fullName} (${user.id})\n–ù–∏–∫: @${user.username || '-'}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø', `allow_${user.id}`)],
        [Markup.button.callback('üö´ –û—Ç–∫–∞–∑–∞—Ç—å –≤ –¥–æ—Å—Ç—É–ø–µ', `deny_${user.id}`)]
      ])
    );
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤:', e);
  }

  return false;
}

bot.use(async (ctx, next) => {
  try {
    const ok = await checkAuth(ctx);
    if (!ok) return;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ checkAuth:', e);
    return;
  }
  return next();
});

bot.action(/allow_(\d+)/, async (ctx) => {
  const newUserId = Number(ctx.match[1]);
  if (!isAuthorized(ctx.from.id)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤', { show_alert: true }).catch(() => {});
    return;
  }

  if (!config.ADMINS.includes(newUserId)) {
    config.ADMINS.push(newUserId);
    saveConfig();
    try {
      await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUserId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤.`);
      await bot.telegram.sendMessage(newUserId, '‚úÖ –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.');
    } catch {}
  } else {
    await ctx.reply('‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.');
  }
  await ctx.answerCbQuery().catch(() => {});
});

bot.action(/deny_(\d+)/, async (ctx) => {
  const denyUserId = Number(ctx.match[1]);
  if (!isAuthorized(ctx.from.id)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤', { show_alert: true }).catch(() => {});
    return;
  }
  try {
    await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${denyUserId} –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.`);
    await bot.telegram.sendMessage(denyUserId, 'üö´ –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –±–æ—Ç—É.');
  } catch {}
  await ctx.answerCbQuery().catch(() => {});
});

function allowedFile(filename) {
  if (!filename) return false;
  // –ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ–±—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é ../
  if (filename.includes('..')) return false;
  const base = path.basename(filename);
  return ALLOWED_FILES.has(base);
}

function getDiskUsage(callback) {
  exec('df -k /', (err, stdout) => {
    if (err) return callback(err);
    const lines = stdout.trim().split('\n');
    if (lines.length < 2) return callback(new Error('Unexpected df output'));
    const parts = lines[1].split(/\s+/);
    const totalKB = Number(parts[1]);
    const usedKB = Number(parts[2]);
    const availKB = Number(parts[3]);
    const usePercent = parts[4];
    callback(null, { totalKB, usedKB, availKB, usePercent });
  });
}

// /start
bot.start(async (ctx) => {
  try {
    await ctx.reply(`ü§ñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:

/ls ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
/show <—Ñ–∞–π–ª> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª
/get <—Ñ–∞–π–ª> <–∫–ª—é—á> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ JSON
/set <—Ñ–∞–π–ª> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON
/rm <—Ñ–∞–π–ª> <–∫–ª—é—á> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ JSON
/clean <—Ñ–∞–π–ª> ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
/reboot ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Raspberry Pi
/log ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
/resmon ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
`);
  } catch (e) {
    console.error('/start reply error:', e);
  }
});

// /ls
bot.command('ls', async (ctx) => {
  try {
    const files = fs.readdirSync(WORK_DIR);
    await ctx.reply('üìÇ –§–∞–π–ª—ã:\n' + files.join('\n'));
  } catch (e) {
    console.error('ls error:', e);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.'); } catch {}
  }
});

// /show
bot.command('show', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  const filename = args[0];
  if (!filename) return ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /show <–∏–º—è —Ñ–∞–π–ª–∞>');
  if (!allowedFile(filename)) return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) return ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    if (content.length > 4000) {
      await ctx.replyWithDocument({ source: filePath });
    } else {
      await ctx.reply(`üìÑ ${filename}:\n\`\`\`\n${content}\n\`\`\``, { parse_mode: 'Markdown' });
    }
  } catch (err) {
    console.error('/show error:', err);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.'); } catch {}
  }
});

// /get
bot.command('get', async (ctx) => {
  const [filename, key] = ctx.message.text.split(' ').slice(1);
  if (!filename || !key) return ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /get <–∏–º—è —Ñ–∞–π–ª–∞> <–∫–ª—é—á>');
  if (!allowedFile(filename)) return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) return ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  try {
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    if (!(key in json)) return ctx.reply(`‚ùå –ö–ª—é—á "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    await ctx.reply(`üîé ${key} = ${JSON.stringify(json[key])}`);
  } catch (err) {
    console.error('/get error:', err);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON.'); } catch {}
  }
});

// /set
bot.command('set', async (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  const filename = args[0], key = args[1], valueRaw = args.slice(2).join(' ');
  if (!filename || !key || !valueRaw) return ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /set <–∏–º—è —Ñ–∞–π–ª–∞> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>');
  if (!allowedFile(filename)) return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) return ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  let value = valueRaw;
  try { value = JSON.parse(valueRaw); } catch {}
  try {
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    json[key] = value;
    fs.writeFileSync(filePath, JSON.stringify(json, null, 2));
    if (path.resolve(filePath) === path.resolve(CONFIG_PATH)) {
      config = loadConfig();
    }
    await ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${key} = ${JSON.stringify(value)}`);
  } catch (err) {
    console.error('/set error:', err);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JSON.'); } catch {}
  }
});

// /rm
bot.command('rm', async (ctx) => {
  const [filename, key] = ctx.message.text.split(' ').slice(1);
  if (!filename || !key) return ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /rm <–∏–º—è —Ñ–∞–π–ª–∞> <–∫–ª—é—á>');
  if (!allowedFile(filename)) return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) return ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  try {
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    if (!(key in json)) return ctx.reply(`‚ùå –ö–ª—é—á "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    delete json[key];
    fs.writeFileSync(filePath, JSON.stringify(json, null, 2));
    if (path.resolve(filePath) === path.resolve(CONFIG_PATH)) {
      config = loadConfig();
    }
    await ctx.reply(`üóë –ö–ª—é—á "${key}" —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    console.error('/rm error:', err);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.'); } catch {}
  }
});

// /clean
bot.command('clean', async (ctx) => {
  const filename = ctx.message.text.split(' ')[1];
  if (!filename) return ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /clean <–∏–º—è —Ñ–∞–π–ª–∞>');
  if (!allowedFile(filename)) return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω.');
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) return ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
  const code = Math.floor(1000 + Math.random() * 9000).toString();
  pendingConfirmations[ctx.chat.id] = { filename, code, userId: ctx.from.id };
  try {
    await ctx.reply(`‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ "${filename}".\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥: \`${code}\``, { parse_mode: 'Markdown' });
  } catch {}
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
bot.on('text', async (ctx) => {
  const state = pendingConfirmations[ctx.chat.id];
  if (!state) return;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É
  if (ctx.from.id !== state.userId) return;

  try {
    if (ctx.message.text.trim() === state.code) {
      const filePath = path.join(WORK_DIR, state.filename);
      if (!allowedFile(state.filename)) {
        await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω.');
      } else {
        if (path.extname(state.filename) === '.json') {
          fs.writeFileSync(filePath, JSON.stringify({}, null, 2));
        } else {
          fs.writeFileSync(filePath, '');
        }
        if (path.resolve(filePath) === path.resolve(CONFIG_PATH)) {
          config = loadConfig();
        }
        await ctx.reply(`‚úÖ –§–∞–π–ª "${state.filename}" –æ—á–∏—â–µ–Ω.`);
      }
    } else {
      await ctx.reply('‚ùå –ö–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    }
  } catch (err) {
    console.error('clean confirm error:', err);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞.'); } catch {}
  }
  delete pendingConfirmations[ctx.chat.id];
});

// /reboot
bot.command('reboot', async (ctx) => {
  if (!isAuthorized(ctx.from.id)) {
    try { await ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.'); } catch {}
    return;
  }
  try {
    await ctx.reply('‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Raspberry Pi...');
    exec('sudo reboot', (err) => {
      if (err) {
        console.error('/reboot error:', err);
        ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: ${err.message}`).catch(() => {});
      }
    });
  } catch (e) {
    console.error('/reboot command error:', e);
  }
});

// /log
bot.command('log', async (ctx) => {
  if (!fs.existsSync(LOGS_DIR)) {
    try { await ctx.reply('‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'); } catch {}
    return;
  }
  try {
    const files = fs.readdirSync(LOGS_DIR).filter(f => f.endsWith('.log'));
    if (!files.length) {
      await ctx.reply('‚ùå –õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
      return;
    }
    const latestLog = files.sort().reverse()[0];
    await ctx.replyWithDocument({ source: path.join(LOGS_DIR, latestLog) });
  } catch (err) {
    console.error('/log error:', err);
    try { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.'); } catch {}
  }
});

// /resmon
bot.command('resmon', async (ctx) => {
  if (!isAuthorized(ctx.from.id)) {
    try { await ctx.reply('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.'); } catch {}
    return;
  }

  const chatId = ctx.chat.id;

  let sent;
  try {
    sent = await ctx.reply('üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...', Markup.inlineKeyboard([
      [Markup.button.callback('‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `stopresmon_${chatId}`)]
    ]));
  } catch (e) {
    console.error('resmon initial reply error:', e);
    try { await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.'); } catch {}
    return;
  }

  resmonState[chatId] = {
    message_id: sent.message_id,
    lastText: ''
  };

  const updateStats = async () => {
    try {
      const mem = process.memoryUsage();
      const totalMem = os.totalmem();
      const freeMem = os.freemem();
      const usedMem = totalMem - freeMem;
      const cpuLoad = (os.loadavg()[0] * 100) / os.cpus().length;
      let temp = 'N/A';
      try {
        const rawTemp = fs.readFileSync('/sys/class/thermal/thermal_zone0/temp', 'utf-8');
        temp = (parseInt(rawTemp) / 1000).toFixed(1) + '¬∞C';
      } catch {}

      getDiskUsage((err, disk) => {
        let diskLine = 'N/A';
        if (!err && disk) {
          const totalMB = (disk.totalKB / 1024).toFixed(1);
          const usedMB = (disk.usedKB / 1024).toFixed(1);
          diskLine = `${usedMB} / ${totalMB} MB (${disk.usePercent})`;
        }

        const newText =
`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤:
üñ• CPU: ${cpuLoad.toFixed(1)}%
üíæ RAM: ${(usedMem / 1024 / 1024).toFixed(1)} / ${(totalMem / 1024 / 1024).toFixed(1)} –ú–ë
üì¶ RSS: ${(mem.rss / 1024 / 1024).toFixed(1)} –ú–ë
üíΩ Disk: ${diskLine}
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}
‚è≥ –ê–ø—Ç–∞–π–º —Å–∏—Å—Ç–µ–º—ã: ${(os.uptime() / 60).toFixed(1)} –º–∏–Ω
‚öôÔ∏è Node: ${process.version}`;

        const state = resmonState[chatId];
        if (!state) return;

        if (newText !== state.lastText) {
          state.lastText = newText;
          bot.telegram.editMessageText(
            chatId,
            state.message_id,
            null,
            newText,
            { reply_markup: Markup.inlineKeyboard([[Markup.button.callback('‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `stopresmon_${chatId}`)]]) }
          ).catch(err => {
            const desc = err?.response?.description || err?.message || '';
            if (!/message is not modified/i.test(desc)) {
              console.error('editMessageText error:', err);
            }
          });
        }
      });
    } catch (err) {
      console.error('updateStats error:', err);
    }
  };

  resmonIntervals[chatId] = setInterval(updateStats, 1000);
  setImmediate(updateStats);
});

// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏ - –ª–æ–≤–∏–º –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ chatId
bot.action(/stopresmon_(-?\d+)/, async (ctx) => {
  const chatId = Number(ctx.match[1]);
  if (!isAuthorized(ctx.from.id)) {
    await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤', { show_alert: true }).catch(() => {});
    return;
  }

  try {
    if (resmonIntervals[chatId]) {
      clearInterval(resmonIntervals[chatId]);
      delete resmonIntervals[chatId];
    }
    if (resmonState[chatId]) {
      await bot.telegram.editMessageText(chatId, resmonState[chatId].message_id, null, '‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.');
      delete resmonState[chatId];
    }
    await ctx.answerCbQuery('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (err) {
    console.error('stopresmon error:', err);
  }
});

bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.');
}).catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
