console.clear();

const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const path = require('path');
const os = require('os');
const { exec } = require('child_process');

// –ü—É—Ç–∏
const WORK_DIR = __dirname;
const CONFIG_PATH = path.join(WORK_DIR, 'config.json');
const LOGS_DIR = path.join(WORK_DIR, 'logs');
const HISTORY_PATH = path.join(WORK_DIR, 'history.json');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
if (!fs.existsSync(CONFIG_PATH)) {
    console.error('–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
}
let config = JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
function isAdmin(ctx) {
    return config.ADMINS.includes(ctx.from.id);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã CPU (RPI)
function getCpuTemp() {
    try {
        const temp = fs.readFileSync('/sys/class/thermal/thermal_zone0/temp', 'utf8');
        return (parseInt(temp) / 1000).toFixed(1);
    } catch (err) {
        return 'N/A';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
function getDiskUsage() {
    try {
        const stat = fs.statSync('/');
        const { size, free } = fs.statSync('/');
        return 'N/A'; // –Ω–∞ Node –±–µ–∑ exec —Ç—Ä—É–¥–Ω–æ, –æ—Å—Ç–∞–≤–∏–º N/A
    } catch {
        return 'N/A';
    }
}

// –ë–æ—Ç
const bot = new Telegraf(config.BOT_TOKEN);

// –°–µ—Å—Å–∏–∏ –≤ –ø–∞–º—è—Ç–∏
let sessions = {};

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π middleware
bot.use((ctx, next) => {
    if (!isAdmin(ctx)) {
        return ctx.reply('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    }
    return next();
});

// /start
bot.start((ctx) => {
    ctx.reply(
`üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

/start - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/resmon - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
/show - –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª
/cleancontext - –æ—á–∏—Å—Ç–∏—Ç—å history.json
/log - –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
/reboot - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å RPI
/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .json —Ñ–∞–π–ª`,
        { parse_mode: 'Markdown' }
    );
});

// /resmon
bot.command('resmon', async (ctx) => {
    let running = true;

    const updateMessage = async (messageId) => {
        while (running) {
            const load = os.loadavg().map(n => n.toFixed(2)).join(', ');
            const memUsedPerc = ((os.totalmem() - os.freemem()) / os.totalmem() * 100).toFixed(2);
            const swapInfo = (() => {
                try {
                    const free = os.freemem();
                    return `${(free / 1024 / 1024).toFixed(1)} MB Free`;
                } catch { return 'N/A'; }
            })();
            const cpuTemp = getCpuTemp();
            const uptime = `${Math.floor(os.uptime() / 3600)}h ${Math.floor((os.uptime() % 3600) / 60)}m`;

            try {
                await ctx.telegram.editMessageText(
                    ctx.chat.id,
                    messageId,
                    null,
`üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã*
CPU Load: ${load}
CPU Temp: ${cpuTemp}¬∞C
RAM Usage: ${memUsedPerc}%
SWAP: ${swapInfo}
Uptime: ${uptime}`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [[{ text: '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_resmon' }]]
                        }
                    }
                );
            } catch (err) {}
            await new Promise(r => setTimeout(r, 2000));
        }
    };

    const msg = await ctx.reply('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...', {
        reply_markup: {
            inline_keyboard: [[{ text: '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'stop_resmon' }]]
        }
    });

    updateMessage(msg.message_id);

    bot.action('stop_resmon', (actionCtx) => {
        running = false;
        actionCtx.editMessageText('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    });
});

// /ls
bot.command('ls', (ctx) => {
    const ignore = config.IGNORE_DIRS || [];
    const files = fs.readdirSync(WORK_DIR)
        .filter(f => !ignore.includes(f))
        .join('\n');
    ctx.reply(`üìÇ –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏:\n${files}`);
});

// /show
bot.command('show', (ctx) => {
    const parts = ctx.message.text.split(' ');
    if (parts.length < 2) return ctx.reply('‚ö† –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: /show filename');

    const filePath = path.join(WORK_DIR, parts[1]);
    if (!fs.existsSync(filePath)) return ctx.reply('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const content = fs.readFileSync(filePath, 'utf8');

    if (content.length > 4000) {
        ctx.replyWithDocument({ source: filePath });
    } else {
        ctx.reply(`üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n\`\`\`\n${content}\n\`\`\``, { parse_mode: 'Markdown' });
    }
});

// /cleancontext
bot.command('cleancontext', (ctx) => {
    fs.writeFileSync(HISTORY_PATH, '{}');
    ctx.reply('‚úÖ –§–∞–π–ª history.json –æ—á–∏—â–µ–Ω');
});

// /log
bot.command('log', (ctx) => {
    if (!fs.existsSync(LOGS_DIR)) return ctx.reply('‚ùå –ü–∞–ø–∫–∞ /logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const logs = fs.readdirSync(LOGS_DIR).sort((a, b) => {
        return fs.statSync(path.join(LOGS_DIR, b)).mtime - fs.statSync(path.join(LOGS_DIR, a)).mtime;
    });

    if (logs.length === 0) return ctx.reply('‚ùå –õ–æ–≥–æ–≤ –Ω–µ—Ç');

    const lastLog = path.join(LOGS_DIR, logs[0]);
    const content = fs.readFileSync(lastLog, 'utf8');

    if (content.length > 4000) {
        ctx.replyWithDocument({ source: lastLog });
    } else {
        ctx.reply(`üìÑ –õ–æ–≥:\n\`\`\`\n${content}\n\`\`\``, { parse_mode: 'Markdown' });
    }
});

// /reboot
bot.command('reboot', (ctx) => {
    ctx.reply('‚ôª –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...', { parse_mode: 'Markdown' });
    exec('sudo reboot', (err) => {
        if (err) ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    });
});

// /edit
bot.command('edit', (ctx) => {
    const jsonFiles = fs.readdirSync(WORK_DIR).filter(f => f.endsWith('.json'));
    sessions[ctx.from.id] = { step: 'choose_file' };

    ctx.reply('üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        reply_markup: {
            inline_keyboard: [
                ...jsonFiles.map(f => [{ text: f, callback_data: `edit_file:${f}` }]),
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_cancel' }]
            ]
        }
    });
});

bot.action('edit_cancel', (ctx) => {
    delete sessions[ctx.from.id];
    ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
});

bot.action(/^edit_file:(.+)$/, (ctx) => {
    const file = ctx.match[1];
    const filePath = path.join(WORK_DIR, file);
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    sessions[ctx.from.id] = { step: 'choose_key', file, filePath, data };

    const content = JSON.stringify(data, null, 2);
    const display = content.length > 4000 ? content.slice(0, 3900) + '\n... (—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω)' : content;

    ctx.editMessageText(
`üìÑ –§–∞–π–ª *${file}*:
\`\`\`
${display}
\`\`\`
üîë –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    ...Object.keys(data).map(k => [{ text: k, callback_data: `edit_key:${k}` }]),
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_cancel' }]
                ]
            }
        }
    );
});

bot.action(/^edit_key:(.+)$/, (ctx) => {
    const key = ctx.match[1];
    if (!sessions[ctx.from.id]) return;
    sessions[ctx.from.id].step = 'enter_value';
    sessions[ctx.from.id].key = key;

    ctx.editMessageText(
`‚úè –¢–µ–∫—É—â–∏–π –∫–ª—é—á: *${key}*
–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: \`${sessions[ctx.from.id].data[key]}\`

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_cancel' }]]
            }
        }
    );
});

bot.on('text', (ctx) => {
    const s = sessions[ctx.from.id];
    if (!s || s.step !== 'enter_value') return;

    s.data[s.key] = ctx.message.text;
    fs.writeFileSync(s.filePath, JSON.stringify(s.data, null, 2));

    ctx.reply(
`‚úÖ –§–∞–π–ª *${s.file}* –∏–∑–º–µ–Ω—ë–Ω
–ö–ª—é—á: *${s.key}*
–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: \`${ctx.message.text}\``,
        { parse_mode: 'Markdown' }
    );

    delete sessions[ctx.from.id];
});

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
