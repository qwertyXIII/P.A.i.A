console.clear();

const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

const WORK_DIR = __dirname;
const CONFIG_PATH = path.join(WORK_DIR, 'config.json');

let config = loadConfig();

const bot = new Telegraf(config.BOT_TOKEN);
const pendingConfirmations = {}; // –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π /clean

function loadConfig() {
  try {
    return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf-8'));
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json:', e);
    process.exit(1);
  }
}

function isAuthorized(userId) {
  return config.ADMINS.includes(userId);
}

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–≥–∞–º–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ —É—Å–ø–µ—à–Ω—ã—Ö
async function authMiddleware(ctx, next) {
  if (!ctx.from || !isAuthorized(ctx.from.id)) {
    const user = ctx.from || {};
    console.warn('‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø:');
    console.warn(`  ID: ${user.id}`);
    console.warn(`  –ò–º—è: ${user.first_name || '-'}`);
    console.warn(`  –§–∞–º–∏–ª–∏—è: ${user.last_name || '-'}`);
    console.warn(`  –ù–∏–∫: ${user.username || '-'}`);
    console.warn('  –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
    await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞ –¥–æ—Å—Ç—É–ø–æ–º. @DXIII_tg');
    return;
  }
  console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.username || ctx.from.id}`);
  return next();
}

// /start —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ø—ã—Ç–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö
bot.start(async (ctx) => {
  if (!isAuthorized(ctx.from.id)) {
    const user = ctx.from || {};
    console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ /start –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º:');
    console.warn(`  ID: ${user.id}`);
    console.warn(`  –ò–º—è: ${user.first_name || '-'}`);
    console.warn(`  –§–∞–º–∏–ª–∏—è: ${user.last_name || '-'}`);
    console.warn(`  –ù–∏–∫: ${user.username || '-'}`);
    console.warn('  –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
    return ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞ –¥–æ—Å—Ç—É–ø–æ–º.');
  }
  console.log(`‚úÖ /start –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.username || ctx.from.id}`);
  await ctx.reply(`ü§ñ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:

/ls ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
/show <—Ñ–∞–π–ª> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª
/get <—Ñ–∞–π–ª> <–∫–ª—é—á> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ JSON
/set <—Ñ–∞–π–ª> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON
/rm <—Ñ–∞–π–ª> <–∫–ª—é—á> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ JSON
/clean <—Ñ–∞–π–ª> ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
/reload ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å admin.js –∏ index.js
/reboot ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Raspberry Pi
`);
});

// –ö–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.command('ls', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /ls –æ—Ç ${ctx.from.username || ctx.from.id}`);
  try {
    const files = fs.readdirSync(WORK_DIR);
    ctx.reply('üìÇ –§–∞–π–ª—ã:\n' + files.join('\n'));
  } catch (e) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.');
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', e);
  }
});

bot.command('show', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /show –æ—Ç ${ctx.from.username || ctx.from.id}`);
  const args = ctx.message.text.split(' ').slice(1);
  const filename = args[0];
  if (!filename) {
    ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /show <–∏–º—è —Ñ–∞–π–ª–∞>');
    return;
  }
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) {
    ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    if (content.length > 4000) {
      ctx.replyWithDocument({ source: filePath });
      return;
    }
    ctx.reply(
      `üìÑ ${filename}:\n\`\`\`\n${content}\n\`\`\``,
      { parse_mode: 'Markdown' }
    );
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
  }
});

bot.command('get', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /get –æ—Ç ${ctx.from.username || ctx.from.id}`);
  const args = ctx.message.text.split(' ').slice(1);
  const [filename, key] = args;
  if (!filename || !key) {
    ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /get <–∏–º—è —Ñ–∞–π–ª–∞> <–∫–ª—é—á>');
    return;
  }
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) {
    ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }
  try {
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    if (!(key in json)) {
      ctx.reply(`‚ùå –ö–ª—é—á "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }
    ctx.reply(`üîé ${key} = ${JSON.stringify(json[key])}`);
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON.');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON:', err);
  }
});

bot.command('set', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /set –æ—Ç ${ctx.from.username || ctx.from.id}`);
  const args = ctx.message.text.split(' ').slice(1);
  const filename = args[0];
  const key = args[1];
  const valueRaw = args.slice(2).join(' ');
  if (!filename || !key || !valueRaw) {
    ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /set <–∏–º—è —Ñ–∞–π–ª–∞> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>');
    return;
  }
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) {
    ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }
  try {
    let value = valueRaw;
    try {
      value = JSON.parse(valueRaw);
    } catch { /* –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É */ }
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    json[key] = value;
    fs.writeFileSync(filePath, JSON.stringify(json, null, 2));
    ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${key} = ${JSON.stringify(value)}`);
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JSON.');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JSON:', err);
  }
});

bot.command('rm', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /rm –æ—Ç ${ctx.from.username || ctx.from.id}`);
  const args = ctx.message.text.split(' ').slice(1);
  const [filename, key] = args;
  if (!filename || !key) {
    ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /rm <–∏–º—è —Ñ–∞–π–ª–∞> <–∫–ª—é—á>');
    return;
  }
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) {
    ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }
  try {
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    if (!(key in json)) {
      ctx.reply(`‚ùå –ö–ª—é—á "${key}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }
    delete json[key];
    fs.writeFileSync(filePath, JSON.stringify(json, null, 2));
    ctx.reply(`üóë –ö–ª—é—á "${key}" —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞:', err);
  }
});

bot.command('clean', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /clean –æ—Ç ${ctx.from.username || ctx.from.id}`);
  const args = ctx.message.text.split(' ').slice(1);
  const filename = args[0];
  if (!filename) {
    ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /clean <–∏–º—è —Ñ–∞–π–ª–∞>');
    return;
  }
  const filePath = path.join(WORK_DIR, filename);
  if (!fs.existsSync(filePath)) {
    ctx.reply(`‚ùå –§–∞–π–ª "${filename}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    return;
  }
  const code = Math.floor(1000 + Math.random() * 9000).toString();
  pendingConfirmations[ctx.chat.id] = { filename, code };
  ctx.reply(`‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ "${filename}".\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥: \`${code}\``, { parse_mode: 'Markdown' });
});

bot.command('reload', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /reload –æ—Ç ${ctx.from.username || ctx.from.id}`);
  ctx.reply('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ admin.js –∏ index.js...');
  exec('sh ./restart_scripts.sh', (error, stdout, stderr) => {
    if (error) {
      ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: ${error.message}`);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–æ–≤:', error);
      return;
    }
    ctx.reply('‚úÖ –°–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n' + (stdout || ''));
    console.log('–°–∫—Ä–∏–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
  });
});

bot.command('reboot', authMiddleware, (ctx) => {
  console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /reboot –æ—Ç ${ctx.from.username || ctx.from.id}`);
  ctx.reply('‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Raspberry Pi...');
  exec('sudo reboot', (error, stdout, stderr) => {
    if (error) {
      ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: ${error.message}`);
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Raspberry Pi:', error);
      return;
    }
    // –ü–æ—Å–ª–µ reboot –±–æ—Ç —É–∂–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
  });
});

bot.on('text', authMiddleware, (ctx) => {
  const state = pendingConfirmations[ctx.chat.id];
  if (!state) return;

  console.log(`‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç ${ctx.from.username || ctx.from.id}`);
  if (ctx.message.text.trim() === state.code) {
    const filePath = path.join(WORK_DIR, state.filename);
    try {
      if (path.extname(state.filename) === '.json') {
        fs.writeFileSync(filePath, JSON.stringify({}, null, 2));
      } else {
        fs.writeFileSync(filePath, '');
      }
      ctx.reply(`‚úÖ –§–∞–π–ª "${state.filename}" –æ—á–∏—â–µ–Ω.`);
      console.log(`‚úÖ –§–∞–π–ª "${state.filename}" –æ—á–∏—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.username || ctx.from.id}`);
    } catch (err) {
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞.');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞:', err);
    }
  } else {
    ctx.reply('‚ùå –ö–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç ${ctx.from.username || ctx.from.id}`);
  }
  delete pendingConfirmations[ctx.chat.id];
});

bot.launch();
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
